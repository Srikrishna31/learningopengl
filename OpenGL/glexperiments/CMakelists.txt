CMAKE_MINIMUM_REQUIRED(VERSION 3.5 FATAL_ERROR)

SET (PROJ_DIR glexperiments)
PROJECT(${PROJ_DIR})


#SET (ASSIMP_PATH "" CACHE FILEPATH "Path to Assimp Library Directory")

#IF (NOT EXISTS "${ASSIMP_PATH}/include/assimp/version.h")
#   MESSAGE(SEND_ERROR "Can't find version.h in ${ASSIMP_PATH}/include/assimp/version.h")
#ENDIF()
#
#IF (NOT EXISTS  "${ASSIMP_PATH}/lib/assimp-vc140-mt${PROJECT_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}")
#    MESSAGE(SEND_ERROR "Can't find the Assimp library(assimp-vc140-mt${PROJECT_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}) in ${ASSIMP_PATH}/lib/")
#ENDIF()
#
#IF (NOT EXISTS "${ASSIMP_PATH}/bin/assimp-vc140-mt${PROJECT_SUFFIX}${CMAKE_SHARED_LIBRARY_SUFFIX}")
#    MESSAGE(SEND_ERROR "Can't find the Assimp binary(assimp-vc140-mt${PROJECT_SUFFIX}${CMAKE_SHARED_LIBRARY_SUFFIX} in ${ASSIMP_PATH}/bin/")
#ENDIF()
#

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${FREEGLUT_DIR}/include/
                    ${CMAKE_SOURCE_DIR}/${GLEW_DIR}/include/GL/
                    ${CMAKE_SOURCE_DIR}/3rd_party/glm/
                    ${ASSIMP_PATH}/include)

SET(PROJECT_LINK_LIBS freeglut${PROJECT_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
                      libglewmx_shared${PROJECT_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX})
                      #assimp-vc140-mt${PROJECT_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX})

LINK_DIRECTORIES(${CMAKE_BINARY_DIR}/${FREEGLUT_DIR}/lib/
                 ${CMAKE_BINARY_DIR}/lib/
                 ${ASSIMP_PATH}/lib/)

LINK_DIRECTORIES(${CMAKE_BINARY_DIR}/${FREEGLUT_DIR}/bin/${CMAKE_BUILD_TYPE}/
                 ${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE}
                 ${ASSIMP_PATH}/bin/)

SET(HEADERS ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/DefaultRenderer.h
            #${CMAKE_SOURCE_DIR}/${PROJ_DIR}/DefaultShaderRenderer.h
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/ISceneRenderer.h
            #${CMAKE_SOURCE_DIR}/${PROJ_DIR}/ModelRenderer.h
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/RectangularMeshRenderer.h
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/SnowmanRenderer.h
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/stdafx.h
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/TriangleRenderer.h
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/TriangleShaderRenderer.h
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/ShaderManager.h)

SET(SOURCES ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/DefaultRenderer.cpp
            #${CMAKE_SOURCE_DIR}/${PROJ_DIR}/DefaultShaderRenderer.cpp
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/glexperiments.cpp
            #${CMAKE_SOURCE_DIR}/${PROJ_DIR}/ModelRenderer.cpp
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/RectangularMeshRenderer.cpp
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/SnowmanRenderer.cpp
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/TriangleRenderer.cpp
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/TriangleShaderRenderer.cpp
            ${CMAKE_SOURCE_DIR}/${PROJ_DIR}/ShaderManager.cpp)

SET(SHADER_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}\\${PROJ_DIR}\\shaders\\vertex.vert
        ${CMAKE_CURRENT_SOURCE_DIR}\\${PROJ_DIR}\\shaders\\framgent.frag
        ${CMAKE_CURRENT_SOURCE_DIR}\\${PROJ_DIR}\\shaders\\geometry.geom)

SOURCE_GROUP("shaders" FILES ${SHADER_SOURCES})

ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCES} ${HEADERS})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_LINK_LIBS} )

#INSTALL(TARGETS ${PROJECT_NAME} DESTINATION ${PROJECT_BINARY_DIR})
MESSAGE(STATUS, "Cmake binary directory: ${CMAKE_BINARY_DIR}")
MESSAGE(STATUS "${CMAKE_SOURCE_DIR}")

#Copy the freeglutd.dll/so to the exe path for execution
ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME} POST_BUILD 
                    COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${CMAKE_BINARY_DIR}/${FREEGLUT_DIR}/bin/freeglut${PROJECT_SUFFIX}${CMAKE_SHARED_LIBRARY_SUFFIX}"
                    $<TARGET_FILE_DIR:${PROJECT_NAME}>)

#Copy the glewd.dll/so to the exe path for execution
ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME} POST_BUILD
                    COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${CMAKE_BINARY_DIR}/bin/glewmx${PROJECT_SUFFIX}${CMAKE_SHARED_LIBRARY_SUFFIX}"
                    $<TARGET_FILE_DIR:${PROJECT_NAME}>)

#Copy the assimp-vc140-mtd.dll/so to the exe path for execution
#ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME} POST_BUILD
 #                   COMMAND ${CMAKE_COMMAND} -E copy_if_different
 #                   "${ASSIMP_PATH}/bin/assimp-vc140-mt${PROJECT_SUFFIX}${CMAKE_SHARED_LIBRARY_SUFFIX}"
 #                   $<TARGET_FILE_DIR:${PROJECT_NAME}>)

#Copy the assimp-vc140-mtd.dll/so to the exe path for execution
#ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME} POST_BUILD
#                    COMMAND ${CMAKE_COMMAND} -E copy_if_different
#                    "${ASSIMP_PATH}/bin/assimp-vc140-mt${PROJECT_SUFFIX}${CMAKE_SHARED_LIBRARY_SUFFIX}"
#                    $<TARGET_FILE_DIR:${PROJECT_NAME}>)
